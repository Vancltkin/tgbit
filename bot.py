import sqlite3
import os
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from dotenv import load_dotenv

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADD_USER, GET_UID, GET_LINK, GET_TEXT, GET_APP_LINK = range(5)
EDIT_USER, EDIT_FIELD, EDIT_VALUE = range(3)

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('bot.db')
        self.init_db()
        
    def init_db(self):
        c = self.conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∞
        c.execute('''CREATE TABLE IF NOT EXISTS admin 
                    (user_id INTEGER PRIMARY KEY)''')
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        c.execute('''CREATE TABLE IF NOT EXISTS users
                    (uid INTEGER PRIMARY KEY,
                     link TEXT,
                     text TEXT,
                     app_link TEXT)''')
        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS templates
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     name TEXT,
                     text TEXT,
                     app_link TEXT)''')
        self.conn.commit()
    
    def get_admin(self):
        c = self.conn.cursor()
        c.execute("SELECT user_id FROM admin")
        return c.fetchone()
    
    def set_admin(self, user_id):
        c = self.conn.cursor()
        c.execute("INSERT INTO admin (user_id) VALUES (?)", (user_id,))
        self.conn.commit()
    
    def add_user(self, uid, link, text, app_link):
        c = self.conn.cursor()
        c.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (uid, link, text, app_link))
        self.conn.commit()
    
    def get_users(self):
        c = self.conn.cursor()
        c.execute("SELECT uid FROM users")
        return [u[0] for u in c.fetchall()]
    
    def get_user(self, uid):
        c = self.conn.cursor()
        c.execute("SELECT * FROM users WHERE uid=?", (uid,))
        return c.fetchone()
    
    def delete_user(self, uid):
        c = self.conn.cursor()
        c.execute("DELETE FROM users WHERE uid=?", (uid,))
        self.conn.commit()
    
    def update_user(self, uid, field, value):
        c = self.conn.cursor()
        c.execute(f"UPDATE users SET {field}=? WHERE uid=?", (value, uid))
        self.conn.commit()

def start(update: Update, context: CallbackContext):
    db = Database()
    user_id = update.effective_user.id
    admin = db.get_admin()
    
    if not admin:
        db.set_admin(user_id)
        update.message.reply_text("üëë –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
        show_admin_menu(update)
    elif user_id == admin[0]:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: admin[0] –≤–º–µ—Å—Ç–æ admin
        show_admin_menu(update)
    else:
        user = db.get_user(user_id)
        if user:
            send_user_info(update, user)
        else:
            update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            
def show_admin_menu(update):
    keyboard = [['–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ê–¥–º–∏–Ω-–º–µ–Ω—é:', reply_markup=reply_markup)

def add_user_start(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return GET_UID

def add_user_get_uid(update: Update, context: CallbackContext):
    context.user_data['uid'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return GET_LINK

def add_user_get_link(update: Update, context: CallbackContext):
    context.user_data['link'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return GET_TEXT

def add_user_get_text(update: Update, context: CallbackContext):
    context.user_data['text'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    return GET_APP_LINK

def add_user_finish(update: Update, context: CallbackContext):
    data = context.user_data
    try:
        db = Database()
        db.add_user(
            int(data['uid']),
            data['link'],
            data['text'],
            update.message.text
        )
        update.message.reply_text("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        print(e)
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
    finally:
        context.user_data.clear()
    return ConversationHandler.END

def list_users(update: Update, context: CallbackContext):
    db = Database()
    users = db.get_users()
    keyboard = [[InlineKeyboardButton(str(uid), callback_data=f'user_{uid}')] for uid in users]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=reply_markup)

def user_detail(update: Update, context: CallbackContext):
    query = update.callback_query
    uid = int(query.data.split('_')[1])
    db = Database()
    user = db.get_user(uid)
    
    text = f"UID: {user[0]}\n–°—Å—ã–ª–∫–∞: {user[1]}\n–¢–µ–∫—Å—Ç: {user[2]}\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {user[3]}"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{uid}'),
         InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{uid}')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

def delete_user(update: Update, context: CallbackContext):
    query = update.callback_query
    uid = int(query.data.split('_')[1])
    db = Database()
    db.delete_user(uid)
    query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
    list_users(update, context)

def edit_user_start(update: Update, context: CallbackContext):
    query = update.callback_query
    uid = int(query.data.split('_')[1])
    context.user_data['edit_uid'] = uid
    
    keyboard = [
        [InlineKeyboardButton("–°—Å—ã–ª–∫–∞", callback_data='edit_link'),
         InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data='edit_text')],
        [InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data='edit_app_link')]
    ]
    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                           reply_markup=InlineKeyboardMarkup(keyboard))
    return EDIT_FIELD

def edit_field(update: Update, context: CallbackContext):
    query = update.callback_query
    field = query.data.split('_')[1]
    context.user_data['edit_field'] = field
    query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")
    return EDIT_VALUE

def edit_value(update: Update, context: CallbackContext):
    value = update.message.text
    uid = context.user_data['edit_uid']
    field = context.user_data['edit_field']
    
    db = Database()
    db.update_user(uid, field, value)
    update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    context.user_data.clear()
    return ConversationHandler.END

def handle_user_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    db = Database()
    user = db.get_user(user_id)
    
    if user:
        send_user_info(update, user)
    else:
        update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

def send_user_info(update, user):
    text = f"{user[2]}\n\n–°—Å—ã–ª–∫–∞: {user[1]}"
    keyboard = [[InlineKeyboardButton("üì® –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=user[1])]]
    
    if user[3]:
        text += f"\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {user[3]}"
        keyboard.append([InlineKeyboardButton("üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=user[3])])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(text, reply_markup=reply_markup)

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
    load_dotenv()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv('BOT_TOKEN')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞:")
        print("BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        updater = Updater(token)
        dp = updater.dispatcher

        # ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        dp.add_handler(CommandHandler('start', start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dp.add_handler(MessageHandler(
            Filters.text & ~Filters.command, 
            handle_user_message
        ))

        # ========== –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ==========
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ConversationHandler)
        conv_add_user = ConversationHandler(
            entry_points=[MessageHandler(Filters.regex('^–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$'), add_user_start)],
            states={
                GET_UID: [MessageHandler(Filters.text, add_user_get_uid)],
                GET_LINK: [MessageHandler(Filters.text, add_user_get_link)],
                GET_TEXT: [MessageHandler(Filters.text, add_user_get_text)],
                GET_APP_LINK: [MessageHandler(Filters.text, add_user_finish)]
            },
            fallbacks=[]
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ConversationHandler)
        conv_edit_user = ConversationHandler(
            entry_points=[CallbackQueryHandler(edit_user_start, pattern='^edit_')],
            states={
                EDIT_FIELD: [CallbackQueryHandler(edit_field, pattern='^edit_')],
                EDIT_VALUE: [MessageHandler(Filters.text, edit_value)]
            },
            fallbacks=[]
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.add_handler(conv_add_user)
        dp.add_handler(conv_edit_user)
        dp.add_handler(MessageHandler(Filters.regex('^–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π$'), list_users))
        dp.add_handler(CallbackQueryHandler(user_detail, pattern='^user_'))
        dp.add_handler(CallbackQueryHandler(delete_user, pattern='^delete_'))
        dp.add_handler(CallbackQueryHandler(list_users, pattern='^back$'))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
        print("2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("3. –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
if __name__ == '__main__':
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if '--init-db' in sys.argv:
        Database()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    else:
        main()
